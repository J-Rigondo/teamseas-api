# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Donation {
  count: Int!
  createdAt: DateTime!
  id: ID!
  message: String
  team: String
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

input DonationCreateManyUserInput {
  count: Int!
  createdAt: DateTime
  id: Int
  message: String
  team: String
  updatedAt: DateTime
}

input DonationCreateManyUserInputEnvelope {
  data: [DonationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input DonationCreateNestedManyWithoutUserInput {
  connect: [DonationWhereUniqueInput!]
  connectOrCreate: [DonationCreateOrConnectWithoutUserInput!]
  create: [DonationCreateWithoutUserInput!]
  createMany: DonationCreateManyUserInputEnvelope
}

input DonationCreateOrConnectWithoutUserInput {
  create: DonationCreateWithoutUserInput!
  where: DonationWhereUniqueInput!
}

input DonationCreateWithoutUserInput {
  count: Int!
  createdAt: DateTime
  message: String
  team: String
  updatedAt: DateTime
}

input DonationWhereUniqueInput {
  id: Int
}

type LoginResponse {
  accessToken: String!
  user: User!
}

input LoginUserInput {
  """이메일"""
  email: String!
  password: String!
}

type Mutation {
  createUser(createUserInput: UserCreateInput!): User!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  removeUser(id: Int!): User!
  updateUser(id: Int!, updateUserInput: UpdateUserInput!): User!
}

type Post {
  _count: PostCount!
  author: User!
  authorId: Int!
  content: String
  createdAt: DateTime!
  favoritedBy: [User!]
  id: ID!
  likes: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  views: Int!
}

type PostCount {
  favoritedBy: Int!
}

input PostCreateManyAuthorInput {
  content: String
  createdAt: DateTime
  id: Int
  likes: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedManyWithoutFavoritedByInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutFavoritedByInput!]
  create: [PostCreateWithoutFavoritedByInput!]
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutFavoritedByInput {
  create: PostCreateWithoutFavoritedByInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  favoritedBy: UserCreateNestedManyWithoutFavoritePostsInput
  likes: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostCreateWithoutFavoritedByInput {
  author: UserCreateNestedOneWithoutPostsInput!
  content: String
  createdAt: DateTime
  likes: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User!

  """전체 유저 리스트"""
  users: [User!]!
}

"""권한"""
enum Role {
  ADMIN
  USER
}

input UpdateUserInput {
  email: String
  name: String
  refreshToken: String
}

type User {
  _count: UserCount!
  donations: [Donation!]

  """이메일"""
  email: String!
  favoritePosts: [Post!]
  followers: [User!]
  following: [User!]
  id: ID!

  """이름"""
  name: String!
  posts: [Post!]
  role: Role!
}

type UserCount {
  donations: Int!
  favoritePosts: Int!
  followers: Int!
  following: Int!
  posts: Int!
}

input UserCreateInput {
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  refreshToken: String
  role: Role!
}

input UserCreateNestedManyWithoutFavoritePostsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFavoritePostsInput!]
  create: [UserCreateWithoutFavoritePostsInput!]
}

input UserCreateNestedManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowersInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateNestedManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutFavoritePostsInput {
  create: UserCreateWithoutFavoritePostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutFavoritePostsInput {
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  refreshToken: String
  role: Role!
}

input UserCreateWithoutFollowersInput {
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  refreshToken: String
  role: Role!
}

input UserCreateWithoutFollowingInput {
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  followers: UserCreateNestedManyWithoutFollowingInput
  name: String!
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  refreshToken: String
  role: Role!
}

input UserCreateWithoutPostsInput {
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String!
  refreshToken: String
  role: Role!
}

input UserWhereUniqueInput {
  email: String
  id: Int
}