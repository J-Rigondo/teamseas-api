# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreatePostInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateReplyInput {
  content: String
  parentId: Int

  """Example field (placeholder)"""
  postId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Donation {
  count: Int!
  createdAt: DateTime!
  id: ID!
  message: String
  team: String
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

input DonationCreateManyUserInput {
  count: Int!
  createdAt: DateTime
  id: Int
  message: String
  team: String
  updatedAt: DateTime
}

input DonationCreateManyUserInputEnvelope {
  data: [DonationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input DonationCreateNestedManyWithoutUserInput {
  connect: [DonationWhereUniqueInput!]
  connectOrCreate: [DonationCreateOrConnectWithoutUserInput!]
  create: [DonationCreateWithoutUserInput!]
  createMany: DonationCreateManyUserInputEnvelope
}

input DonationCreateOrConnectWithoutUserInput {
  create: DonationCreateWithoutUserInput!
  where: DonationWhereUniqueInput!
}

input DonationCreateWithoutUserInput {
  count: Int!
  createdAt: DateTime
  message: String
  team: String
  updatedAt: DateTime
}

input DonationWhereUniqueInput {
  id: Int
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

input LoginUserInput {
  """이메일"""
  email: String!

  """비밀번호"""
  password: String!
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): PostEntity!
  createReply(createReplyInput: CreateReplyInput!): Reply!
  createUser(createUserInput: UserCreateInput!): User!
  googleLogin(tokenId: String!): LoginResponse!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  removePost(id: Int!): PostEntity!
  removeReply(id: Int!): Reply!
  removeUser(id: Int!): User!
  updatePost(updatePostInput: UpdatePostInput!): PostEntity!
  updateReply(updateReplyInput: UpdateReplyInput!): Reply!
  updateUser(id: Int!, updateUserInput: UpdateUserInput!): User!
}

type Post {
  Reply: [Reply!]
  _count: PostCount!
  author: User!
  authorId: Int!
  content: String
  createdAt: DateTime!
  favoritedBy: [User!]
  id: ID!
  likes: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  views: Int!
}

type PostCount {
  Reply: Int!
  favoritedBy: Int!
}

input PostCreateManyAuthorInput {
  content: String
  createdAt: DateTime
  id: Int
  likes: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedManyWithoutFavoritedByInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutFavoritedByInput!]
  create: [PostCreateWithoutFavoritedByInput!]
}

input PostCreateNestedOneWithoutReplyInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutReplyInput
  create: PostCreateWithoutReplyInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutFavoritedByInput {
  create: PostCreateWithoutFavoritedByInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutReplyInput {
  create: PostCreateWithoutReplyInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  Reply: ReplyCreateNestedManyWithoutPostInput
  content: String
  createdAt: DateTime
  favoritedBy: UserCreateNestedManyWithoutFavoritePostsInput
  likes: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostCreateWithoutFavoritedByInput {
  Reply: ReplyCreateNestedManyWithoutPostInput
  author: UserCreateNestedOneWithoutPostsInput!
  content: String
  createdAt: DateTime
  likes: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostCreateWithoutReplyInput {
  author: UserCreateNestedOneWithoutPostsInput!
  content: String
  createdAt: DateTime
  favoritedBy: UserCreateNestedManyWithoutFavoritePostsInput
  likes: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
  views: Int
}

type PostEntity {
  _count: PostCount!
  author: User!
  authorId: Int!
  content: String
  createdAt: DateTime!
  favoritedBy: [User!]
  id: ID!
  likes: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  views: Int!
}

type PostResponse {
  nextId: String
  posts: [PostEntity!]!
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  findAllParentReply(postId: Int!): [Reply!]!
  post(id: Int!): PostEntity!
  posts(cursor: String): PostResponse!
  reply(id: Int!): Reply!
  user(where: UserWhereUniqueInput!): User!

  """전체 유저 리스트"""
  users: [User!]!
}

type Reply {
  _count: ReplyCount!
  author: User!
  authorId: Int!
  childCount: Int!
  childs: [Reply!]
  content: String
  del_yn: YN!
  depth: Int!
  groupNo: Int!
  groupOrder: Int!
  id: ID!
  parent: Reply
  parentId: Int
  post: Post!
  postId: Int!
}

type ReplyCount {
  childs: Int!
}

input ReplyCreateManyAuthorInput {
  childCount: Int
  content: String
  del_yn: YN
  depth: Int
  groupNo: Int!
  groupOrder: Int
  id: Int
  parentId: Int
  postId: Int!
}

input ReplyCreateManyAuthorInputEnvelope {
  data: [ReplyCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input ReplyCreateManyParentInput {
  authorId: Int!
  childCount: Int
  content: String
  del_yn: YN
  depth: Int
  groupNo: Int!
  groupOrder: Int
  id: Int
  postId: Int!
}

input ReplyCreateManyParentInputEnvelope {
  data: [ReplyCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input ReplyCreateManyPostInput {
  authorId: Int!
  childCount: Int
  content: String
  del_yn: YN
  depth: Int
  groupNo: Int!
  groupOrder: Int
  id: Int
  parentId: Int
}

input ReplyCreateManyPostInputEnvelope {
  data: [ReplyCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input ReplyCreateNestedManyWithoutAuthorInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutAuthorInput!]
  create: [ReplyCreateWithoutAuthorInput!]
  createMany: ReplyCreateManyAuthorInputEnvelope
}

input ReplyCreateNestedManyWithoutParentInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutParentInput!]
  create: [ReplyCreateWithoutParentInput!]
  createMany: ReplyCreateManyParentInputEnvelope
}

input ReplyCreateNestedManyWithoutPostInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutPostInput!]
  create: [ReplyCreateWithoutPostInput!]
  createMany: ReplyCreateManyPostInputEnvelope
}

input ReplyCreateNestedOneWithoutChildsInput {
  connect: ReplyWhereUniqueInput
  connectOrCreate: ReplyCreateOrConnectWithoutChildsInput
  create: ReplyCreateWithoutChildsInput
}

input ReplyCreateOrConnectWithoutAuthorInput {
  create: ReplyCreateWithoutAuthorInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutChildsInput {
  create: ReplyCreateWithoutChildsInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutParentInput {
  create: ReplyCreateWithoutParentInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutPostInput {
  create: ReplyCreateWithoutPostInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateWithoutAuthorInput {
  childCount: Int
  childs: ReplyCreateNestedManyWithoutParentInput
  content: String
  del_yn: YN
  depth: Int
  groupNo: Int!
  groupOrder: Int
  parent: ReplyCreateNestedOneWithoutChildsInput
  post: PostCreateNestedOneWithoutReplyInput!
}

input ReplyCreateWithoutChildsInput {
  author: UserCreateNestedOneWithoutReplyInput!
  childCount: Int
  content: String
  del_yn: YN
  depth: Int
  groupNo: Int!
  groupOrder: Int
  parent: ReplyCreateNestedOneWithoutChildsInput
  post: PostCreateNestedOneWithoutReplyInput!
}

input ReplyCreateWithoutParentInput {
  author: UserCreateNestedOneWithoutReplyInput!
  childCount: Int
  childs: ReplyCreateNestedManyWithoutParentInput
  content: String
  del_yn: YN
  depth: Int
  groupNo: Int!
  groupOrder: Int
  post: PostCreateNestedOneWithoutReplyInput!
}

input ReplyCreateWithoutPostInput {
  author: UserCreateNestedOneWithoutReplyInput!
  childCount: Int
  childs: ReplyCreateNestedManyWithoutParentInput
  content: String
  del_yn: YN
  depth: Int
  groupNo: Int!
  groupOrder: Int
  parent: ReplyCreateNestedOneWithoutChildsInput
}

input ReplyWhereUniqueInput {
  id: Int
}

"""권한"""
enum Role {
  ADMIN
  USER
}

input UpdatePostInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateReplyInput {
  content: String
  id: Int!
  parentId: Int

  """Example field (placeholder)"""
  postId: Int
}

input UpdateUserInput {
  email: String
  name: String
  refreshToken: String
}

type User {
  Reply: [Reply!]
  _count: UserCount!
  donations: [Donation!]

  """이메일"""
  email: String!
  favoritePosts: [Post!]
  followers: [User!]
  following: [User!]
  id: ID!

  """이름"""
  name: String!
  posts: [Post!]
  provider: String
  role: Role!
}

type UserCount {
  Reply: Int!
  donations: Int!
  favoritePosts: Int!
  followers: Int!
  following: Int!
  posts: Int!
}

input UserCreateInput {
  Reply: ReplyCreateNestedManyWithoutAuthorInput
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  provider: String
  refreshToken: String
  role: Role!
}

input UserCreateNestedManyWithoutFavoritePostsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFavoritePostsInput!]
  create: [UserCreateWithoutFavoritePostsInput!]
}

input UserCreateNestedManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowersInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateNestedManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutReplyInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReplyInput
  create: UserCreateWithoutReplyInput
}

input UserCreateOrConnectWithoutFavoritePostsInput {
  create: UserCreateWithoutFavoritePostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReplyInput {
  create: UserCreateWithoutReplyInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutFavoritePostsInput {
  Reply: ReplyCreateNestedManyWithoutAuthorInput
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  provider: String
  refreshToken: String
  role: Role!
}

input UserCreateWithoutFollowersInput {
  Reply: ReplyCreateNestedManyWithoutAuthorInput
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  provider: String
  refreshToken: String
  role: Role!
}

input UserCreateWithoutFollowingInput {
  Reply: ReplyCreateNestedManyWithoutAuthorInput
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  followers: UserCreateNestedManyWithoutFollowingInput
  name: String!
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  provider: String
  refreshToken: String
  role: Role!
}

input UserCreateWithoutPostsInput {
  Reply: ReplyCreateNestedManyWithoutAuthorInput
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String
  provider: String
  refreshToken: String
  role: Role!
}

input UserCreateWithoutReplyInput {
  donations: DonationCreateNestedManyWithoutUserInput
  email: String!
  favoritePosts: PostCreateNestedManyWithoutFavoritedByInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  name: String!
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  provider: String
  refreshToken: String
  role: Role!
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

enum YN {
  N
  Y
}