// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

model Donation {
  id        Int      @id @default(autoincrement())
  ///@Validator.Min(1)
  count     Int
  message   String?
  team      String?
  user      User     @relation(fields: [userId], references: id)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("donation")
}

model User {
  id            Int        @id @default(autoincrement())
  ///@Validator.MinLength(2)
  ///이름
  name          String
  ///@Validator.IsEmail()
  ///이메일
  email         String     @unique
  ///@HideField()
  password      String?
  posts         Post[]
  donations     Donation[]
  favoritePosts Post[]     @relation(name: "FavoritedPosts", references: [id])
  following     User[]     @relation("UserFollows", references: [id])
  followers     User[]     @relation("UserFollows", references: [id])
  role          Role
  ///@HideField()
  refreshToken  String?
  provider      String?

  Reply Reply[]
  @@map("user")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String?  @db.MediumText
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: id)
  authorId    Int
  views       Int      @default(0)
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  favoritedBy User[]   @relation(name: "FavoritedPosts", references: [id])

  @@map("post")
  Reply Reply[]
}

model Reply {
  id         Int     @id @default(autoincrement())
  post       Post    @relation(fields: [postId], references: id)
  postId     Int
  author     User    @relation(fields: [authorId], references: id)
  authorId   Int
  parent    Reply?   @relation("ParentReply", fields: [parentId], references: id)
  parentId  Int?
  content    String? @db.MediumText
  groupNo    Int
  depth      Int     @default(0)
  groupOrder Int     @default(0)
  childCount Int     @default(0)
  del_yn     YN      @default(value: N)

  childs Reply[] @relation("ParentReply")


  @@map("reply")
}

enum YN {
  Y
  N
}

///권한
enum Role {
  ADMIN
  USER
}
